name: CI

on:
  push:
    branches:
      # Run the CI workflow only on master for microsoft/vscode-python for now.
      - azure*

env:
  PYTHON_VERSION: 3.8
  MOCHA_REPORTER_JUNIT: true # Use the mocha-multi-reporters and send output to both console (spec) and JUnit (mocha-junit-reporter). Also enables a reporter which exits the process running the tests if it haven't already.
  CACHE_NPM_DEPS: cache-npm
  CACHE_OUT_DIRECTORY: cache-out-directory
  CACHE_PIP_DEPS: cache-pip
  # Key for the cache created at the end of the the 'Cache ./pythonFiles/lib/python' step.
  CACHE_PYTHONFILES: cache-pvsc-pythonFiles
  ARTIFACT_NAME_VSIX: ms-python-insiders-vsix
  COVERAGE_REPORTS: tests-coverage-reports
  TEST_RESULTS_DIRECTORY: .
  LKG_TAG: ci-lkg

jobs:
  ### Initialization: retrieve, install and cache dependencies
  #   python-deps:
  #     name: Install Python Requirements
  #     runs-on: ubuntu-latest
  #     # if: github.repository == 'microsoft/vscode-python'
  #     steps:
  #       - name: Checkout
  #         uses: actions/checkout@v2

  #       - name: Show all env vars
  #         run: |
  #           printenv
  #         shell: bash

  #       - name: Use Python ${{env.PYTHON_VERSION}}
  #         uses: actions/setup-python@v2
  #         with:
  #           python-version: ${{env.PYTHON_VERSION}}

  #       - name: Upgrade pip
  #         run: python -m pip install -U pip

  #       - name: Install Python requirements
  #         run: |
  #           python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
  #           python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/old_ptvsd --no-cache-dir --implementation py --no-deps --upgrade 'ptvsd==4.3.2'
  #           python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/debugpy/no_wheels --no-cache-dir --implementation py --no-deps --upgrade --pre debugpy

  #       - name: Install debugpy wheels
  #         run: |
  #           python -m pip --disable-pip-version-check install -r build/debugger-install-requirements.txt
  #           python ./pythonFiles/install_debugpy.py

  #       # Retrieve the list of debugpy versions from PyPI in order to increase the specificity of the pip cache key,
  #       # so that the cache gets invalidated as necessary.
  #       # See https://github.com/microsoft/vscode-python/pull/9843#discussion_r373635221
  #       - name: curl PyPI to get debugpy versions
  #         run: curl --output debugpy.json https://pypi.org/pypi/debugpy/json

  #       - name: Cache pip files
  #         uses: actions/cache@v1
  #         with:
  #           path: ~/.cache/pip
  #           key: ${{runner.os}}-${{env.CACHE_PIP_DEPS}}-pip-${{env.PYTHON_VERSION}}-${{hashFiles('requirements.txt')}}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('debugpy.json')}}

  #       - name: Cache ./pythonFiles/lib/python
  #         uses: actions/cache@v1
  #         with:
  #           path: ./pythonFiles/lib/python
  #           key: ${{runner.os}}-${{env.CACHE_PYTHONFILES}}-pythonFiles-${{env.PYTHON_VERSION}}-${{hashFiles('requirements.txt')}}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('debugpy.json')}}

  #   js-ts-deps:
  #     name: Install npm dependencies
  #     runs-on: ubuntu-latest
  #     # if: github.repository == 'microsoft/vscode-python'
  #     steps:
  #       - name: Checkout
  #         uses: actions/checkout@v2

  #       - name: Install dependencies (npm ci)
  #         run: npm ci --prefer-offline

  #       - name: Cache npm files
  #         uses: actions/cache@v1
  #         with:
  #           path: ~/.npm
  #           key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

  #       # - name: Login via Az module
  #       #   uses: azure/login@v1.1
  #       #   with:
  #       #     creds: ${{secrets.AZURE_CREDENTIALS}}
  #       #     enable-AzPSSession: true

  #       # - name: Run Az CLI script
  #       #   run: |
  #       #     az webapp list --query "[?state=='Running']"

  #       # - name: Login into container
  #       #   run: |
  #       #     az acr login --name pvscContainers
  #   - name: Login into container
  #     uses: azure/docker-login@v1
  #     with:
  #       login-server: pvsccontainers.azurecr.io
  #       username: ${{ secrets.DOCKERIO_USERNAME }}
  #       password: ${{ secrets.DOCKERIO_PASSWORD }}

  #   - name: Pull docker image
  #     run: |
  #       docker pull pvsccontainers.azurecr.io/samples/2
  #       docker tag pvsccontainers.azurecr.io/samples/2 python3.8.3

  runInsideContainer:
    name: Run inside container
    runs-on: ubuntu-latest
    container: docker://pvsccicontainers.azurecr.io/alltools
    # container: continuumio/miniconda:4.6.14
    # if: github.repository == 'microsoft/vscode-python'
    steps:
      - name: Show all env vars
        run: |
          printenv
        shell: bash

      - name: Bash
        shell: bash -l {0}
        run: |
          conda info
          conda list

      #   - name: See if python is on PATH
      #     run: |
      #       python --version
      #       python -c"import sys;print(sys.executable)"

      #   - name: Use Python 2.7
      #     uses: actions/setup-python@v2
      #     with:
      #       python-version: 2.7

      - name: See if python is on PATH
        run: |
          python -c"import sys;print(sys.executable)"
          python --version

      - name: Show all env vars
        run: |
          printenv
        shell: bash

      - name: See if python is on PATH
        run: |
          python -c"import sys;print(sys.executable)"
          python --version

  test_pyenv:
    runs-on: ubuntu-latest
    name: install pyenv
    steps:
      - name: setup pyenv
        uses: 'gabrielfalcao/pyenv-action@v5'
        with:
          default: 3.7.2
          versions: 3.6.8, 3.5.7

      # create virtualenv for each python version

      - name: Create virtualenv for python 3.5.7
        run: pyenv local 3.5.7 && python3 -mvenv .venv357

      - name: Create virtualenv for python 3.6.8
        run: pyenv local 3.6.8 && python3 -mvenv .venv365

      - name: Create virtualenv for python 3.7.2
        run: pyenv local 3.7.2 && python3 -mvenv .venv372

  example-2-linux:
    name: Ex2 Linux
    runs-on: 'ubuntu-latest'
    steps:
      - name: Show all env vars
        run: |
          printenv
        shell: bash
      - uses: goanpeca/setup-miniconda@v1
        with:
          miniconda-version: 'latest'
      - uses: dschep/install-pipenv-action@v1
        with:
          version: 2018.11.26
      - name: Pipenv version
        run: |
          pipenv --version
      - name: Install python version
        uses: gabrielfalcao/pyenv-action@v5
        with:
          default: '3.8'
          command: pip install -U pip # upgrade pip after installing python
      - name: Pyenv version
        run: |
          pyenv --version
      - name: Create conda environments
        run: |
          conda create -n "test_env1" -y python
          conda create -p "./test_env2" -y python
          create -p "$HOME/test_env3" -y python
      - name: Bash
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: PowerShell Core
        shell: pwsh
        run: |
          conda info
          conda list

      - name: Show all env vars
        run: |
          printenv
        shell: bash

  example-2-mac:
    name: Ex2 Mac
    runs-on: 'macos-latest'
    steps:
      - name: Show all env vars
        run: |
          printenv
        shell: bash
      - uses: goanpeca/setup-miniconda@v1
        with:
          miniconda-version: 'latest'
      - name: Sh
        shell: sh -l {0}
        run: |
          conda info
          conda list
      - name: Bash
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: PowerShell Core
        shell: pwsh
        run: |
          conda info
          conda list

      - name: Show all env vars
        run: |
          printenv
        shell: bash

  example-2-win:
    name: Ex2 Windows
    runs-on: 'windows-latest'
    steps:
      - uses: goanpeca/setup-miniconda@v1
        with:
          miniconda-version: 'latest'
      - name: Bash
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: PowerShell
        shell: powershell
        run: |
          conda info
          conda list
      - name: PowerShell Core
        shell: pwsh
        run: |
          conda info
          conda list
      - name: Cmd.exe
        shell: cmd /C CALL {0}
        run: >-
          conda info &&
          conda list

  example-3-linux:
    name: Ex2 Linux 4.6.14
    runs-on: 'ubuntu-latest'
    steps:
      - uses: goanpeca/setup-miniconda@v1
        with:
          miniconda-version: '4.6.14'
      #   - name: Sh
      #     shell: sh -l {0}
      #     run: |
      #       conda info
      #       conda list
      - name: Bash
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: PowerShell Core
        shell: pwsh
        run: |
          conda info
          conda list

  example-3-mac:
    name: Ex2 Mac 4.6.14
    runs-on: 'macos-latest'
    steps:
      - uses: goanpeca/setup-miniconda@v1
        with:
          miniconda-version: '4.6.14'
      - name: Sh
        shell: sh -l {0}
        run: |
          conda info
          conda list
      - name: Bash
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: PowerShell Core
        shell: pwsh
        run: |
          conda info
          conda list

  example-3-win:
    name: Ex2 Windows 4.6.14
    runs-on: 'windows-latest'
    steps:
      - uses: goanpeca/setup-miniconda@v1
        with:
          miniconda-version: '4.6.14'
      - name: Bash
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: PowerShell
        shell: powershell
        run: |
          conda info
          conda list
      - name: PowerShell Core
        shell: pwsh
        run: |
          conda info
          conda list
      - name: Cmd.exe
        shell: cmd /C CALL {0}
        run: >-
          conda info &&
          conda list
  ### Hygiene + VSIX upload

#   compile-hygiene:
#     name: Compile, lint, check for errors
#     runs-on: ubuntu-latest
#     # if: github.repository == 'microsoft/vscode-python'
#     needs: [js-ts-deps, python-deps]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Show all env vars
#         run: |
#           printenv
#         shell: bash

#       - name: Retrieve cached npm files
#         uses: actions/cache@v1
#         with:
#           path: ~/.npm
#           key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

#       - name: Install dependencies (npm ci)
#         run: npm ci --prefer-offline

#       - name: Run gulp prePublishNonBundle
#         run: npx gulp prePublishNonBundle

#       - name: Cache the out/ directory
#         uses: actions/cache@v1
#         with:
#           path: ./out
#           key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

#       - name: Check dependencies
#         run: npm run checkDependencies

#       - name: Run linting on TypeScript code
#         run: npx tslint --project tsconfig.json

#       - name: Run prettier on TypeScript code
#         run: npx prettier 'src/**/*.ts*' --check

#       - name: Run prettier on JavaScript code
#         run: npx prettier 'build/**/*.js' --check

#       - name: Use Python ${{env.PYTHON_VERSION}}
#         uses: actions/setup-python@v2
#         with:
#           python-version: ${{env.PYTHON_VERSION}}

#       - name: Run Black on Python code
#         run: |
#           python -m pip install -U black
#           python -m black . --check
#         working-directory: pythonFiles

#   build-vsix:
#     name: Build VSIX
#     runs-on: ubuntu-latest
#     # if: github.repository == 'microsoft/vscode-python'
#     needs: [python-deps, js-ts-deps]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Retrieve cached npm files
#         uses: actions/cache@v1
#         with:
#           path: ~/.npm
#           key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

#       - name: curl PyPI to get debugpy versions
#         run: curl --output debugpy.json https://pypi.org/pypi/debugpy/json

#       - name: Retrieve cached pythonFiles/ directory
#         uses: actions/cache@v1
#         with:
#           path: ./pythonFiles/lib/python
#           key: ${{runner.os}}-${{env.CACHE_PYTHONFILES}}-pythonFiles-${{env.PYTHON_VERSION}}-${{hashFiles('requirements.txt')}}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('debugpy.json')}}

#       - name: Install dependencies (npm ci)
#         run: npm ci --prefer-offline

#       - name: Clean directory
#         run: npm run clean

#       # Use the GITHUB_RUN_ID environment variable to update the build number.
#       # GITHUB_RUN_ID is a unique number for each run within a repository.
#       # This number does not change if you re-run the workflow run.
#       - name: Update build number
#         run: npm run updateBuildNumber -- --buildNumber $GITHUB_RUN_ID

#       - name: Package the VSIX
#         run: npm run package

#       - uses: actions/upload-artifact@v1
#         with:
#           name: ${{env.ARTIFACT_NAME_VSIX}}
#           path: ms-python-insiders.vsix

### Non-smoke tests
#   tests:
#     name: Tests
#     # The value of runs-on is the OS of the current job (specified in the strategy matrix below) instead of being hardcoded.
#     runs-on: ${{ matrix.os }}
#     # if: github.repository == 'microsoft/vscode-python'
#     needs: [python-deps, js-ts-deps]
#     strategy:
#       fail-fast: false
#       matrix:
#         # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
#         # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
#         os: [ubuntu-latest]
#         # Run the tests on the oldest and most recent versions of Python.
#         python: [2.7, 3.8]
#         test-suite: [ts-unit, python-unit, venv, single-workspace, multi-workspace, debugger, functional]
#     env:
#       # Something in Node 12.16.0 breaks the TS debug adapter, and ubuntu-latest bundles Node 12.16.1.
#       # We can remove this when we switch over to the python-based DA in https://github.com/microsoft/vscode-python/issues/7136.
#       # See https://github.com/microsoft/ptvsd/issues/2068
#       NODE_VERSION: 12.15.0
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Show all env vars
#         run: |
#           printenv
#         shell: bash

#       - name: Retrieve cached npm files
#         uses: actions/cache@v1
#         with:
#           path: ~/.npm
#           key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

#       - name: Install dependencies (npm ci)
#         run: npm ci

#       - name: Retrieve cached compile output directory
#         # Use an id for this step so that its cache-hit output can be accessed and checked in the next step.
#         id: out-cache
#         uses: actions/cache@v1
#         with:
#           path: ./out
#           key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

#       - name: Compile if not cached
#         run: npx gulp prePublishNonBundle
#         if: steps.out-cache.outputs.cache-hit == false

#       - name: Use Python ${{matrix.python}}
#         uses: actions/setup-python@v2
#         with:
#           python-version: ${{matrix.python}}

#       - name: Use Node ${{env.NODE_VERSION}}
#         uses: actions/setup-node@v1
#         with:
#           node-version: ${{env.NODE_VERSION}}

#       - name: curl PyPI to get debugpy versions
#         run: curl --output debugpy.json https://pypi.org/pypi/debugpy/json

#       - name: Retrieve cached pythonFiles/ directory
#         uses: actions/cache@v1
#         # Use an id for this step so that its cache-hit output can be accessed and checked in the next step.
#         id: pythonFiles-cache
#         with:
#           path: ./pythonFiles/lib/python
#           key: ${{runner.os}}-${{env.CACHE_PYTHONFILES}}-pythonFiles-${{env.PYTHON_VERSION}}-${{hashFiles('requirements.txt')}}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('debugpy.json')}}

#       - name: Install Python requirements if not cached
#         run: |
#           python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
#           python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/old_ptvsd --no-cache-dir --implementation py --no-deps --upgrade 'ptvsd==4.3.2'
#           python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/debugpy/no_wheels --no-cache-dir --implementation py --no-deps --upgrade --pre debugpy
#           # We need to have debugpy available in wheels/ so that tests relying on it keep passing, but we don't need install_debugpy's logic in the test phase.
#           python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/debugpy/wheels --no-cache-dir --implementation py --no-deps --upgrade --pre debugpy
#         if: steps.pythonFiles-cache.outputs.cache-hit == false

#       - name: Install test requirements
#         run: python -m pip install --upgrade -r build/test-requirements.txt

#       - name: pip install ipython requirements
#         run: |
#           python -m pip install numpy
#           python -m pip install --upgrade -r ./build/ipython-test-requirements.txt
#         if: matrix.test-suite == 'python-unit'

#       - name: Install Debugpy wheels
#         run: |
#           python -m pip install wheel
#           python -m pip --disable-pip-version-check install -r build/debugger-install-requirements.txt
#           python ./pythonFiles/install_debugpy.py
#         shell: bash
#         if: matrix.test-suite == 'debugger' && matrix.python == 3.8

#       - name: Install functional test requirements
#         run: |
#           python -m pip install numpy
#           python -m pip install --upgrade -r ./build/functional-test-requirements.txt
#         if: matrix.test-suite == 'functional'

#       - name: Prepare pipenv for venv tests
#         env:
#           TEST_FILES_SUFFIX: testvirtualenvs
#           PYTHON_VIRTUAL_ENVS_LOCATION: './src/tmp/envPaths.json'
#         shell: pwsh
#         if: matrix.test-suite == 'venv'
#         run: |
#           python -m pip install pipenv
#           python -m pipenv run python ./build/ci/addEnvPath.py ${{env.PYTHON_VIRTUAL_ENVS_LOCATION}} pipenvPath

#       - name: Prepare virtualenv for venv tests
#         env:
#           TEST_FILES_SUFFIX: testvirtualenvs
#           PYTHON_VIRTUAL_ENVS_LOCATION: './src/tmp/envPaths.json'
#         shell: pwsh
#         if: matrix.test-suite == 'venv'
#         run: |
#           python -m pip install virtualenv
#           python -m virtualenv .virtualenv/
#           if ('${{matrix.os}}' -match 'windows-latest') {
#             & ".virtualenv/Scripts/python.exe" ./build/ci/addEnvPath.py ${{env.PYTHON_VIRTUAL_ENVS_LOCATION}} virtualEnvPath
#           } else {
#             & ".virtualenv/bin/python" ./build/ci/addEnvPath.py ${{env.PYTHON_VIRTUAL_ENVS_LOCATION}} virtualEnvPath
#           }

#       - name: Prepare venv for venv tests
#         env:
#           TEST_FILES_SUFFIX: testvirtualenvs
#           PYTHON_VIRTUAL_ENVS_LOCATION: './src/tmp/envPaths.json'
#         shell: pwsh
#         if: matrix.test-suite == 'venv' && startsWith(matrix.python, 3.)
#         run: |
#           python -m venv .venv
#           if ('${{matrix.os}}' -match 'windows-latest') {
#             & ".venv/Scripts/python.exe" ./build/ci/addEnvPath.py ${{env.PYTHON_VIRTUAL_ENVS_LOCATION}} venvPath
#           } else {
#             & ".venv/bin/python" ./build/ci/addEnvPath.py ${{env.PYTHON_VIRTUAL_ENVS_LOCATION}} venvPath
#           }

#       - name: Prepare conda for venv tests
#         env:
#           TEST_FILES_SUFFIX: testvirtualenvs
#           PYTHON_VIRTUAL_ENVS_LOCATION: './src/tmp/envPaths.json'
#         shell: pwsh
#         if: matrix.test-suite == 'venv'
#         run: |
#           # 1. For `terminalActivation.testvirtualenvs.test.ts`
#           if ('${{matrix.os}}' -match 'windows-latest') {
#             $condaPythonPath = Join-Path -Path $Env:CONDA -ChildPath python.exe
#             $condaExecPath = Join-Path -Path $Env:CONDA -ChildPath Scripts | Join-Path -ChildPath conda
#           } else{
#             $condaPythonPath = Join-Path -Path $Env:CONDA -ChildPath bin | Join-Path -ChildPath python
#             $condaExecPath = Join-Path -Path $Env:CONDA -ChildPath bin | Join-Path -ChildPath conda
#           }
#           & $condaPythonPath ./build/ci/addEnvPath.py ${{env.PYTHON_VIRTUAL_ENVS_LOCATION}} condaExecPath $condaExecPath
#           & $condaPythonPath ./build/ci/addEnvPath.py ${{env.PYTHON_VIRTUAL_ENVS_LOCATION}} condaPath

#           # 2. For `interpreterLocatorService.testvirtualenvs.ts`

#           & $condaExecPath create -n "test_env1" -y python
#           & $condaExecPath create -p "./test_env2" -y python
#           & $condaExecPath create -p "~/test_env3" -y python

#       - name: Set CI_PYTHON_PATH and CI_DISABLE_AUTO_SELECTION
#         run: |
#           echo "::set-env name=CI_PYTHON_PATH::python"
#           echo "::set-env name=CI_DISABLE_AUTO_SELECTION::1"
#         shell: bash
#         if: matrix.test-suite != 'ts-unit'

#       # Run TypeScript unit tests only for Python 3.X.
#       - name: Run TypeScript unit tests
#         run: npm run test:unittests:cover
#         if: matrix.test-suite == 'ts-unit' && startsWith(matrix.python, 3.)

#       # Upload unit test coverage reports for later use in the "reports" job.
#       - name: Upload unit test coverage reports
#         uses: actions/upload-artifact@v1
#         with:
#           name: ${{runner.os}}-${{env.COVERAGE_REPORTS}}
#           path: .nyc_output
#         if: matrix.test-suite == 'ts-unit' && startsWith(matrix.python, 3.)

#       # Run the Python and IPython tests in our codebase.
#       - name: Run Python and IPython unit tests
#         run: |
#           python pythonFiles/tests/run_all.py
#           python -m IPython pythonFiles/tests/run_all.py
#         if: matrix.test-suite == 'python-unit'

#       # The virtual environment based tests use the `testSingleWorkspace` set of tests
#       # with the environment variable `TEST_FILES_SUFFIX` set to `testvirtualenvs`,
#       # which is set in the "Prepare environment for venv tests" step.
#       # We also use a third-party GitHub Action to install xvfb on Linux,
#       # run tests and then clean up the process once the tests ran.
#       # See https://github.com/GabrielBB/xvfb-action
#       - name: Run venv tests
#         env:
#           TEST_FILES_SUFFIX: testvirtualenvs
#           CI_PYTHON_VERSION: ${{matrix.python}}
#         uses: GabrielBB/xvfb-action@v1.0
#         with:
#           run: npm run testSingleWorkspace
#         if: matrix.test-suite == 'venv'

#       - name: Run single-workspace tests
#         uses: GabrielBB/xvfb-action@v1.0
#         with:
#           run: npm run testSingleWorkspace
#         if: matrix.test-suite == 'single-workspace'

#       - name: Run multi-workspace tests
#         uses: GabrielBB/xvfb-action@v1.0
#         with:
#           run: npm run testMultiWorkspace
#         if: matrix.test-suite == 'multi-workspace'

#       - name: Run debugger tests
#         uses: GabrielBB/xvfb-action@v1.0
#         with:
#           run: npm run testDebugger
#         if: matrix.test-suite == 'debugger'

#       - name: Run functional tests
#         run: npm run test:functional
#         if: matrix.test-suite == 'functional'

#   smoke-tests:
#     name: Smoke tests
#     # The value of runs-on is the OS of the current job (specified in the strategy matrix below) instead of being hardcoded.
#     runs-on: ${{ matrix.os }}
#     needs: [build-vsix]
#     # if: github.repository == 'microsoft/vscode-python'
#     strategy:
#       fail-fast: false
#       matrix:
#         # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
#         # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
#         os: [ubuntu-latest, windows-latest]
#         python: [3.8]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Show all env vars
#         run: |
#           printenv
#         shell: bash

#       - name: Use Python ${{matrix.python}}
#         uses: actions/setup-python@v2
#         with:
#           python-version: ${{matrix.python}}

#       - name: Retrieve cached npm files
#         uses: actions/cache@v1
#         with:
#           path: ~/.npm
#           key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

#       - name: Install dependencies (npm ci)
#         run: npm ci --prefer-offline

#       - name: pip install system test requirements
#         run: |
#           python -m pip install --upgrade -r build/test-requirements.txt
#           python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
#           python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/old_ptvsd --no-cache-dir --implementation py --no-deps --upgrade 'ptvsd==4.3.2'
#           python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/debugpy/no_wheels --no-cache-dir --implementation py --no-deps --upgrade --pre debugpy
#         shell: bash

#       - name: pip install ipython requirements
#         run: |
#           python -m pip install numpy
#           python -m pip install --upgrade -r ./build/ipython-test-requirements.txt

#       - name: pip install jupyter
#         run: |
#           python -m pip install --upgrade jupyter

#       - name: Download VSIX
#         uses: actions/download-artifact@v1
#         with:
#           name: ${{env.ARTIFACT_NAME_VSIX}}

#       # Extract the artifact from its download folder (./${{env.ARTIFACT_NAME_VSIX}}) to the repo root,
#       # then delete the download folder and compile the source code.
#       - name: Prepare for smoke tests
#         run: |
#           mv ${{env.ARTIFACT_NAME_VSIX}}/* .
#           rm -r ${{env.ARTIFACT_NAME_VSIX}}
#           npx tsc -p ./
#         shell: bash

#       - name: Set CI_PYTHON_PATH and CI_DISABLE_AUTO_SELECTION
#         run: |
#           echo "::set-env name=CI_PYTHON_PATH::python"
#           echo "::set-env name=CI_DISABLE_AUTO_SELECTION::1"
#         shell: bash

#       - name: Run smoke tests
#         env:
#           DISPLAY: 10
#         uses: GabrielBB/xvfb-action@v1.0
#         with:
#           run: node ./out/test/smokeTest.js

#   coverage:
#     name: Coverage reports upload
#     runs-on: ubuntu-latest
#     # if: github.repository == 'microsoft/vscode-python'
#     needs: [tests, smoke-tests]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Retrieve cached npm files
#         uses: actions/cache@v1
#         with:
#           path: ~/.npm
#           key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

#       - name: Install dependencies (npm ci)
#         run: npm ci --prefer-offline

#       # It isn't possible to specify a regex for artifact names, so we have to download each artifact manually.
#       # The name pattern is ${{runner.os}}-${{env.COVERAGE_REPORTS}}, and possible values for runner.os are `Linux`, `Windows`, or `macOS`.
#       # See https://help.github.com/en/actions/reference/contexts-and-expression-syntax-for-github-actions#runner-context
#       - name: Download Ubuntu test coverage artifacts
#         uses: actions/download-artifact@v1
#         with:
#           name: Linux-${{env.COVERAGE_REPORTS}}

#       - name: Extract Ubuntu coverage artifacts to ./nyc_output
#         run: |
#           mkdir .nyc_output
#           mv Linux-${{env.COVERAGE_REPORTS}}/* .nyc_output
#           rm -r Linux-${{env.COVERAGE_REPORTS}}

#       - name: Generate coverage reports
#         run: npm run test:cover:report
#         continue-on-error: true

#       - name: Upload coverage to codecov
#         uses: codecov/codecov-action@v1
#         with:
#           CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}
#           file: ./coverage/cobertura-coverage.xml

#   lkg-tag:
#     # LKG = last known good
#     name: Tag successful build as CI LKG
#     runs-on: ubuntu-latest
#     needs: [tests, smoke-tests]
#     # if: github.repository == 'microsoft/vscode-python'
#     steps:
#       - name: Delete existing tag
#         run: |
#           curl -s -X DELETE https://api.github.com/repos/microsoft/vscode-python/git/refs/tags/${{env.LKG_TAG}} \
#           -H "Authorization: token ${{secrets.GITHUB_TOKEN}}"

#       # We only need to create a tag reference for lightweight tags.
#       # See https://developer.github.com/v3/git/tags/#create-a-tag-object
#       # And https://developer.github.com/v3/git/refs/#create-a-reference
#       - name: Create a tag reference
#         run: |
#           curl -s -X POST "https://api.github.com/repos/microsoft/vscode-python/git/refs" \
#           -H "Authorization: token ${{secrets.GITHUB_TOKEN}}"  \
#           -d @- << EOF
#           {
#             "ref": "refs/tags/${{env.LKG_TAG}}",
#             "sha": "${{github.sha}}"
#           }
#           EOF
